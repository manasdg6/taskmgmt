name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install and Lint Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run lint

      - name: Install and Lint Backend
        working-directory: ./backend
        run: |
          npm ci
          npm run lint

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects

      - name: Run npm audit
        run: |
          cd frontend && npm audit
          cd ../backend && npm audit

  test:
    needs: [validate]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Test Backend
        working-directory: ./backend
        run: |
          npm ci
          npm test --if-present

      - name: Test Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm test -- --watchAll=false

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Build Backend
        working-directory: ./backend
        run: |
          npm ci
          npm run build --if-present

      - name: Build Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            frontend/build
            backend/dist

  docker:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Images
        run: |
          # Build and push frontend
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --push \
            -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest \
            -t ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }} \
            ./frontend

          # Build and push backend
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --push \
            -t ${{ secrets.DOCKER_USERNAME }}/backend:latest \
            -t ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }} \
            ./backend

  deploy:
    needs: [docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    concurrency: production
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Production
        run: |
          echo "Deploying version ${{ github.sha }}"
          # Add your deployment commands here based on your hosting platform
          # This could be AWS ECS, Kubernetes, or other cloud platforms