name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'npm'

      - name: Frontend Lint
        working-directory: ./frontend
        run: |
          npm ci
          npm run lint --if-present

      - name: Backend Lint
        working-directory: ./backend
        run: |
          npm ci
          npm run lint --if-present

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects

  test-and-build:
    needs: [lint, security]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}

      - name: Cache backend dependencies
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}

      - name: Build and Test Backend
        working-directory: ./backend
        run: |
          npm ci
          npm run build --if-present
          npm test --if-present

      - name: Build and Test Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build
          npm test --if-present

      - name: Upload frontend build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build

      - name: Upload backend build
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist

  docker:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/build

      - name: Download backend build
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend/dist

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to production
        run: |
          echo "Add your deployment commands here"
        # Add actual deployment steps based on your hosting platform
        # This could be AWS, Azure, GCP, or any other cloud platform

  deploy-to-codespace:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: GitHub Codespaces Access
        uses: github/codespaces/actions/create@main
        with:
          client-id: ${{ secrets.CODESPACE_CLIENT_ID }}
          client-secret: ${{ secrets.CODESPACE_CLIENT_SECRET }}
          
      - name: Start Codespace and Deploy
        uses: github/codespaces/actions/start@main
        with:
          codespace-name: ${{ github.repository }}-deployment
          machine-type: basicLinux32gb
          env: |
            NODE_ENV=production
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}
          
      - name: Deploy Application
        uses: github/codespaces/actions/run-command@main
        with:
          command: |
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            docker-compose up -d